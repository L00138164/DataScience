swirl()
install.packages("rvest")
library(rvest)
url <- 'https://www.imdb.com/search/title?release_date=2017-01-01,2017-12-31&count=250'
web_page <- read_html(url)
head(web_page)
str(web_page)
rank_data_html <- html_nodes(web_page, '#main > div > div > div.lister-list > div:nth-child(n) > div.lister-item-content > h3 > span.lister-item-index.unbold.text-primary')
head(rank_data_html, 10)
length(rank_data_html)
rank_data <- html_text(rank_data_html)
head(rank_data, 10)
rank_data <- as.numeric(rank_data)
head(rank_data, 10)
title_data_html <- html_nodes(web_page, '#main > div > div > div.lister-list > div:nth-child(n) > div.lister-item-content > h3 > a')
title_data <- html_text(title_data_html)
head(title_data, 10)
description_data_html <- html_nodes(web_page, '#main > div > div > div.lister-list > div:nth-child(n) > div.lister-item-content > p:nth-child(4)')
description_data <- html_text(description_data_html)
description_data <- html_text(description_data_html)
url <- 'https://www.imdb.com/search/title?release_date=2017-01-01,2017-12-31&count=250'
web_page <- read_html(url)
head(web_page)
str(web_page)
rank_data_html <- html_nodes(web_page, '#main > div > div > div.lister-list > div:nth-child(n) > div.lister-item-content > h3 > span.lister-item-index.unbold.text-primary')
head(rank_data_html, 10)
length(rank_data_html)
rank_data <- html_text(rank_data_html)
head(rank_data, 10)
library(swirl)
library(swirl)
swirl()
exit
bye
swirl()
install_course_zip("D:/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inteference")
install_course_zip("D:/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inference")
swirl()
library(swirl)
install_course_zip("D:/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inference")
swirl()
library(swirl)
install_course_zip("D:/Data Science/swirl_courses-master.zip", multi = TRUE, which_course = "Statistical Inference")
swirl()
1
2
1/2
(32-30)/(10/4)
0.05
15
qt()
qt(p,15)
qt(.05,15)
qt(.95,15)
dim()
dim(1)
dim(fs)
t.test()
t.test(fs$sheight-fs$sheight)
t.test(fs$sheight-fs$fheight)
11.7885*sd(fs$sheight-fs$height)/sqrt(1078)
11.7885 * sd(fs$sheight - fs$fheight) / sqrt(1078)
mybin
5
.035
library(swirl)
install_course_zip("D:/Data Science/swirl_courses-master.zip", multi = TRUE, which_course = "Open Intro")
swirl()
y<-100
cars$type
sqrt(y)
z<-sqrt(y)
?sqrt
cars
10
range(car$price)
range(cars$price)
sum(car$price)
sum(cars$price)
1079.6/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted<-sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
25
1
25
25
50
16-20
15-20
20
15
20
15-20
exit
3
0
install.packages(pwr)
library(pwr)
install.packages("pwr")
library(pwr)
?pwr.p.test()
?pwr.p.test
pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
library(pwr)
pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
power_changes <- pwr.p.test(h=ES.h(p1 = .75,p2=.5), sig.level = .05,power = 0.8,alternative = "greater")
power_changes
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .05, power = 0.8)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .05, power = 0.8, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .05, power = 0.8)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .05, power = 0.9)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .04, power = 0.8,, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .04, power = 0.8, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = .75, p2 = .5), sig.level = .04, power = 0.8)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.05, power = 0.8, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, power = 0.8, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, power = 0.9, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, power = 0.95, alternative = "greater")
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, power = 0.95)
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, n = 40, alternative = "greater")
plot(power_changes)
power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.5), sig.level = 0.01, n = 40)
power_changes
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.65), sig.level = 0.05, power=0.8)
power_changes
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.75, p2 = 0.65), sig.level = 0.05, power=0.8)
power_changes
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.5), sig.level = 0.05, power=0.8)
power_changes
plot(power_changes)
power_changes <- pwr.p.test(h = ES.h(p1 = 0.65, p2 = 0.5), sig.level = 0.05, power=0.8)
power_changes
plot(power_changes)
?cohen.ES
effect_size <- cohen.ES(test = c("r"), size = c("medium"))
effect_size
pwr.r.test(r=effect_size$effect.size,power=0.8, sig.level = 0.05)
power_changes<- power.p.test(h=effect_size,n=20,sig.level=0.05)
effect_size<-c(0.2,0.5,0.8)
power_changes<- power.p.test(h=effect_size,n=20,sig.level=0.05)
power_changes
?power.p.test
effect_size<-c(0.2,0.5,0.8)
power_changes <- power.p.test(h = effect_size, sig.level = 0.05 n = 20)
power_changes <- power.p.test(h = effect_size, sig.level = 0.05, n = 20)
power_changes <- pwr.p.test(h = effect_size, sig.level = 0.05, n = 20)
power_changes
pwr.2p.test(h=ES.h(p1 = 0.55,p2 = 0.5),sig.level = 0.05,power=.8)
plot(power_changes)
power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.5), sig.level = 0.05, power = .8)
plot(power_changes)
power_changes <- pwr.2p.test(h = ES.h(p1 = 0.55, p2 = 0.5), sig.level = 0.05, power = .95)
power_changes
swirl::install_course()
library(swirl)
swirl()
mydf<-read.csv(path2csv,strinsAsFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv)
mydf<- read.csv(path2csv,stringsAsFactors = FALSE )
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_ip,package,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:arch)
select(cran,country:r_arch)
cran
select(cran,-time)
select(-5:20)
?select
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(can,r_version == "3:1:1", country == "US")
filter(cran,r_version == "3:1:1", country == "US")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version == "3.0.2", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN" )
filter(cran, size > "100500" | r_os == "linux-gnu")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500,r_os == "linux-gnu")
is.na(c(data(diamonds, package = "ggplot2")))
exit()
exit()
bye
0
exit
data(diamonds, package = "ggplot2")
head(diamonds,4)
dim(head(diamonds,4))
library(magrittr)
diamonds %>% head(4) %>% dim
round(exp(diff(log(x))),1)
x <- c(0.109, .359, .63, .996, .515, .142, .017, .829, .907)
round(exp(diff(log(x))),1)
x %>% log %>% diff %>% exp %>% round(1)
install.packages("dplyr")
diamonds %>% head(5)
diamonds
head(diamonds)
diamonds
library(dplyr)
diamonds %>% select(1:20)
diamonds %>% select(1,20)
diamonds(1:20)
?slice
slice(diamonds,1:20)
slice(diamonds,1:5,8,15:20)
slice(diamonds, cslice(diamonds, c(1:5, 8, 15:20))1:5,8,15:20)
test <- c(1:5,8,15:20)
test
slice(diamonds, c(1:5, 8, 15:20))
set <- select(diamonds,carat,price)
?mutate()
mutate(set, ratio = price/carat)
diamonds %>% select(carat,price) %>% mutate(ratio = price/carat)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat) %>% mutate(Double = ratio/2)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat) %>% mutate(Double = ratio*2)
mutate(set,double=ratio*2)
mutate(set, ratio,double = ratio * 2)
mutate(set, ratio = price / carat, double = ratio * 2)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat) %>% mutate(Double = ratio*2)
diamonds %>% select(carat, price) %>% mutate(ratio = price / carat,Double = ratio*2)
                    AvgCarat = mean(carat))
summarise(diamonds, AvgPrice = mean(price),                     MedianPrice = median(price),                     AvgCarat = mean(carat))
data_grouped <- group_by(diamonds,cut)
data_grouped
summarise(data_grouped, AvgPrice = mean(price))
data_grouped <- group_by(diamonds, cut)
data_summary <- summarise(data_grouped, AvgPrice = mean(price), SumCarat = sum(carat))
arrange(data_summary,AvgPrice)
data_summary
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") my_data <- combine_results(csv_file_list) my_data str(my_data) #Function to insert the list of files combine_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_record <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)         data_of_interest <- lotto_data[2:9]         lotto_data <- rbind(lotto_data, data_of_interest)     }     return(lotto_data) }
combine_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_record <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)         data_of_interest <- lotto_data[2:9]         lotto_data <- rbind(lotto_data, data_of_interest)     }     return(lotto_data) }
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") my_data <- combine_results(csv_file_list)
head(my_data,5> head(my_data,5))
select(my_data, ball)
select(my_data, ball)select(my_data,ball)
head(my_data)
combine_results <- function(file_list) {     lotto_data <- NULL     for (csv_file in file_list) {         lotto_record <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto/", csv_file, sep = ""), stringsAsFactors = FALSE)         data_of_interest <- lotto_data[2:9]         lotto_data <- rbind(lotto_data, data_of_interest)     }     return(lotto_data) }
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") my_data <- combine_results(csv_file_list)
str(my_data)
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") # Examine the vector csv_file_list # Function that reads all csv files into one data frame and returns the result. combine_results <- function(file_list) {     # Initialise lotto_data variable     # Note: it hasn't been assigned a specific variable type eg string      all_lotto_data <- NULL     for (csv_file in file_list) {         # Read each of the csv files in turn and skip the first line of data as it         # contains headings within the csv file         lotto_file <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto", csv_file, sep = ""), stringsAsFactors = FALSE)         # Only select attributes we're interested in         # We don't need the first attribute         data_of_interest <- lotto_file[1:8]         # append vertically to the all_lotto_data data frame         all_lotto_data <- rbind(all_lotto_data, data_of_interest)     }     # Return the concatenated result     return(all_lotto_data) } # Call the function and return the result to a data frame my_lotto_data <- combine_results(csv_file_list) # show the contents of my_lotto_data my_lotto_data
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") # Examine the vector csv_file_list # Function that reads all csv files into one data frame and returns the result. combine_results <- function(file_list) {     # Initialise lotto_data variable     # Note: it hasn't been assigned a specific variable type eg string      all_lotto_data <- NULL     for (csv_file in file_list) {         # Read each of the csv files in turn and skip the first line of data as it         # contains headings within the csv file         lotto_file <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto", csv_file, sep = ""), stringsAsFactors = FALSE)         # Only select attributes we're interested in         # We don't need the first attribute         data_of_interest <- lotto_file[1:8]         # append vertically to the all_lotto_data data frame         all_lotto_data <- rbind(all_lotto_data, data_of_interest)     }     # Return the concatenated result     return(all_lotto_data) } # Call the function and return the result to a data frame my_lotto_data <- combine_results(csv_file_list) # show the contents of my_lotto_data my_lotto_data
write.csv(my_lotto_data, file = "ld.csv", quote = FALSE, na = "", row.names = FALSE)
csv_file_list <- list.files(path = "D:/Data Science/Lab/Lotto", pattern = "*.csv") my_lotto_data <- NULL # Examine the vector csv_file_list # Function that reads all csv files into one data frame and returns the result. combine_results <- function(file_list) {     # Initialise lotto_data variable     # Note: it hasn't been assigned a specific variable type eg string      all_lotto_data <- NULL     for (csv_file in file_list) {         # Read each of the csv files in turn and skip the first line of data as it         # contains headings within the csv file         lotto_file <- read.csv(header = TRUE, paste("D:/Data Science/Lab/Lotto", csv_file, sep = ""), stringsAsFactors = FALSE)         # Only select attributes we're interested in         # We don't need the first attribute         data_of_interest <- lotto_file[1:8]         # append vertically to the all_lotto_data data frame         all_lotto_data <- rbind(all_lotto_data, data_of_interest)     }     # Return the concatenated result     return(all_lotto_data) } # Call the function and return the result to a data frame my_lotto_data <- combine_results(csv_file_list) # show the contents of my_lotto_data my_lotto_data #Save the contents of my_lotto_data to a csv file called "ld.csv" write.csv(my_lotto_data, file = "ld.csv", quote = FALSE, na = "", row.names = FALSE)
install.packages("hflights")
library(hflights)
head(hflights)
head(hflights)
str(hflights)
hflights_df <- tbl_df(hflights)
library(dplyr)
hflights_df <- tbl_df(hflights)
str(hflights_df)
f_df <- filter(hflights_df, Month = "1", UniqueCarrier = "AA")
f_df <- filter(hflights_df, Month == "1", UniqueCarrier == "AA")
f_df <- filter(hflights_df, Month == "1", UniqueCarrier == "AA" | "UA")
f_df <- filter(hflights_df, Month == "1", UniqueCarrier == "AA" | UniqueCarrier == "UA")
f_df
?aarange()
?arrange()
f_df %>% arrange(Month,DayofMonth,AirTime)
f_df %>% arrange(desc(Month,DayofMonth,AirTime))
f_df %>% select(Year:DayOfWeek,TailNum,ActualElapsedTime)
f_df %>% mutate(Gain = ArrDelay - DepDelay,Gain_per_hour = Gain/(AirTime/60))
f_df %>% summarise(Delay = mean(ArrDelay))
f_df %>% summarise(Delay = list(mean(ArrDelay)))
f_df %>% summarise(list(Delay = mean(ArrDelay)))
f_df %>% summarise(Delay = mean(ArrDelay) )
f_df %>% (!is.na(ArrDelay)) %>% summarise(Delay = mean(ArrDelay))
f_df %>% na.omit(ArrDelay) %>% summarise(Delay = mean(ArrDelay))
drugs <- data.frame(Dosage,ResponsetodrugA,ResponsetodrugB)
Dosage <- c(20, 30, 40, 45, 60)
Drug_A <- c(16, 20, 27, 40, 60)
Drug_B <- c(15, 18, 25, 31, 40)
ResponsetodrugA <- Drug_A
ResponsetodrugB <- Drug_B
drugs <- data.frame(Dosage,ResponsetodrugA,ResponsetodrugB)
plot(drugs)
drugs <- data.frame(Dosage, ResponsetodrugA, ResponsetodrugB)
drugs
plot(drugs)
plot(dosage,type= "o", col= "blue")
plot(dosage,type= "o", col= "blue")
plot(Dosage,type= "o", col= "blue")
plot(Dosage,type= "o", col= "blue")
?plot()
plot(Dosage,Drug_A, type = "b")
?par()
?par(new)
plot(dosage,Drug_b,type= "b")
plot(dosage,Drug_B,type= "b")
plot(Dosage,Drug_B,type= "b")
par(new=TRUE)
plot(Dosage,Drug_B,type= "b")
plot(Dosage, Drug_A, type = "b")
par(new=TRUE)
plot(Dosage, Drug_B, type = "b")
opar <- par(no.readonly =  TRUE)
?lty
??lty
?lty
?par
opar <- par(no.readonly = TRUE)
opar <- par(lty = 2, pch = 17)
plot(Dosage,Drug_A,type = "b")
par(opar)
plot(Dosage,Drug_A,type= "b", lty= 3,lwd=3,pchisq=15,cex=2)
plot(Dosage,Drug_A,type= "b", lty= 3,lwd=3,pch=15,cex=2)
plot(Dosage,Drug_A,type= "b", lty= 3,lwd=3,pch=15,cex=2)
title(main = "Drug Dosage", col.main = "blue", font.main = 4)
?ylumb
plot(Dosage, Drug_A, type = "b", lty = 3, lwd = 3, pch = 15, cex = 2, ylim = c(0, 100))
title(main = "Drug Dosage", col.main = "blue", font.main = 4)
lines(Dosage, Drug_B, type = "o", pch = 22, lty = 2, col = "red")
graph_range <-range(0,Drug_A,Drug_B)
graph_range
plot(Drug_A,graph_range,axes= FALSE)
plot(Drug_A,ylim=graph_range,axes= FALSE)
plot(Drug_A,ylim=graph_range,axes= FALSE,type = "b",lty = 3, pch = 15, cex = 2)
plot(Drug_A,ylim=graph_range,axes= FALSE,type = "b",lty = 3, pch = 15, cex = 2,ann = FALSE)
lines(Drug_B, type = "o", pch = 22, lty = 2, col = "red")
?axis
axis(1, at = 1:5, lab = c("20ml","40ml","60ml","80ml","100ml"))
axis(1, at = 1:5, lab = c("20ml","40ml","60ml","80ml","100ml"))
?labels()
?subhead()
axis(1, at = 1:5, xlab = "ml", lab = c("20ml", "40ml", "60ml", "80ml", "100ml"))
axis(1, at = 1:5, xlab = 'ml', lab = c("20ml", "40ml", "60ml", "80ml", "100ml"))
axis(1, at = 1:5, xlab = 'ml', lab = c("20ml", "40ml", "60ml", "80ml", "100ml"))
axis(1, at = 1:5, lab = c("20ml", "40ml", "60ml", "80ml", "100ml"), xlab = 'ml')
axis(1, at = 1:5, lab = c("20ml", "40ml", "60ml", "80ml", "100ml"), xlab = 'ml')
plot(1, at = 1:5, lab = c("20ml", "40ml", "60ml", "80ml", "100ml"), xlab = 'ml')
plot( lab = c("20ml", "40ml", "60ml", "80ml", "100ml"), xlab = 'ml')
axis(2, las = 1, at = 5 * 0:graph_range[2])
axis(2, las = 1, at = 5 * 0:graph_range[2])
plot(Drug_A, ylim = graph_range, axes = FALSE, type = "b", lty = 3, pch = 15, cex = 2, ann = FALSE)
axis(2, las = 1, at = 5 * 0:graph_range[2])
?box()
box(which = "plot", lty = "solid")
plot(Drug_A, ylim = graph_range, axes = FALSE, type = "b", lty = 3, pch = 15, cex = 2, xlab = "millilitres")
axis(1, at = 1:5, lab = c("20ml", "40ml", "60ml", "80ml", "100ml"))
axis(2, las = 1, at = 5 * 0:graph_range[2])
box(which = "plot", lty = "solid")
library(car)
scatter.smooth(x = cars$speed, y = cars$dist, main = "Dist ~ Speed")
install.packages("e1071")
library(e1071)
par(mfrow = c(1,2))
    sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
plot(density(cars$speed), main = "Density Plot:Speed", ylab = "Frequency",sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
plot(density(cars$speed), main = "Density Plot:Speed", ylab =  "Frequency",sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
par(mfrow = c(1, 2))
plot(density(cars$speed), main = "Density Plot:Speed", ylab =  "Frequency",sub = paste("Skewness:", round(e1071::skewness(cars$speed),2)))
polygon(density(cars$speed), col = "red")
plot(density(cars$dist), main = "Density Plot:Dist", ylab = "Frequency", sub = paste("Skewness:", round(e1071::skewness(cars$dist), 2)))
polygon(density(cars$dist), col = "red")
cor(cars$speed,cars$dist)
linearMod <- lm(dist ~ speed, data = cars)
print(linearMod)
summary(linearMod)
summary(linearMod)
AIC(linearMod)
BIC(linearMod)
no_of_records <- sample(1:nrow(cars), 0.8 * nrow(cars))
training_data <- cars[no_of_records,]
testing_data <- cars[-no_of_records,]
nrow(training_data)
lr_model <- lm(dist ~ speed, data = training_data)
dist_predicted <- predict(lr_model, testing_data)
summary(lr_model)
nrow(testing_data)
nrow(cars)
actual_preds <- data.frame(cbind(actuals = testing_data$dist, predicted = dist_predicted))
head(actual_preds)
actual_preds <- data.frame(cbind(actuals = testing_data$dist, predicted = dist_predicted))
correlation_accuracy <- cor(actual_preds)
correlation_accuracy
min_max_accuracy <- mean(apply(actual_preds, 1, min) / apply(actual_preds, 1, max))
min_max_accuracy
mape <- mean(abs(actual_preds$predicted - actual_preds$actuals)) / actual_preds@actuals)
mape <- mean(abs((actual_preds$predicted - actual_preds$actuals)) / actual_preds@actuals)
mape <- mean(abs((actual_preds$predicted - actual_preds$actuals)) / actual_preds$actuals)
mape
install.packages("DAAG")
library(DAAG)
cvResults <- suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE, seed = 29, legend.pocs = "topleft", printit = FALSE, main = "Small symbols are predicted values while bigger ones are actuals."))
cvResults <- suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE, seed = 29, legend.pocs = "topleft", printit = FALSE, main = "Small symbols are predicted values while bigger ones are actuals."));
cvResults <- suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE, seed = 29,legend.pocs = "topleft", printit = FALSE, main = "Small symbols are predicted values while bigger ones are actuals."));
cvResults <- suppressWarnings(CVlm(data = cars, form.lm = dist ~ speed, m = 5, dots = FALSE,seed = 29,legend.pos = "topleft", printit = FALSE, main = "Small symbols are predicted values while bigger ones are actuals."));
ts_data <- EuStockMarkets[,1]
opar <- par()
par(mfrow = c(1,2))
decomposed_result <- decompose(ts_data, data = "mult")
decomposed_result <- decompose(ts_data, type = "mult")
plot(decomposed_result)
decomposed_result <- decompose(ts_data, type = "additive")
plot(decomposed_result)
seasonal_trend_error <- stl(ts_data, s.window = "periodic")
par <- opar
stlRes$time.series
seasonal_trend_error$time.series
stlRes$time.series
lagged_ts <- lag(ts_data, 3)
install.packages("DataCombine")
library(DataCombine)
my_dataframe <- as.data.frame(ts_data)
my_dataframe <- slide(my_dataframe, "x", NewVar = "xLag1", slideBy = -1)
my_dataframe <- slide(my_dataframe, "x", NewVar = "xLead1", slideBy = -1)
head(my_dataframe)
tail(my_dataframe)
acf_res <- acf(AirPassengers)
pacf_res <- pacf(AirPassengers)
plot(JohnsonJohnson)
trained_model <- lm(JohnsonJohnson ~ c(1:length(JohnsonJohnson)))
plot(resid(trained_model), type = "l")
install.packages("forecast")
library(forecast)
ts_decompose <- stl(AirPassengers, "periodic")
ts_seasonal_adjust <- seasadj(ts_decompose)
plot(AirPasssengers, type = "l")
plot(AirPasssengers, type = "l")
library(DataCombine)
plot(AirPasssengers, type = "l")
plot(ts_seasonal_adjust, type = "l")
ts_decompose <- stl(AirPassengers, "periodic")
ts_seasonal_adjust <- seasadj(ts_decompose)
plot(AirPasssengers, type = "l")
plot(ts_seasonal_adjust, type = "l")
seasonplot(ts_seasonal_adjust, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: AirPassengers")
ts_decompose <- stl(AirPassengers, "periodic")
ts_seasonal_adjust <- seasadj(ts_decompose)
plot(ts_decompose, type = "l")
plot(ts_seasonal_adjust, type = "l")
seasonplot(ts_seasonal_adjust, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: AirPassengers")
seasonplot(ts_seasonal_adjust, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: AirPassengers")
library(tseries)
adf.test(ts_data)
kpss.test(ts_data)
nsdiffs(AirPassengers)
AirPassengers_seasdiff <- diff(AirPassengers, lag = frequency(AirPassengers), differences = 1)
plot(AirPassengers_seasdiff, type = "l", main = "Seasonally differenced")
plot(Nile)
ndiffs(Nile)
d_nile <- diff(NIle)
d_nile <- diff(Nile)
plot(d_nile)
ndiffs(d_nile)
adf.test(d_nile)
Acf(d_nile)
Pacf(d_nile)
fit <- Arima(Nile, order = c(0,1,1))
fir
fit
accuracy(fit)
accuracy(fit)
qqnorm(fit$residuals)
qqline(fit$residuals)
Box.test(fit$residuals, type =  "Ljung-Box")
forecast(fit,3)
plot(forecast)
series_forecast <- forecast(fit, 3)
plot(series_forecast)
fit <-auto.arima(Nile)
fit
accuracy(fit)
